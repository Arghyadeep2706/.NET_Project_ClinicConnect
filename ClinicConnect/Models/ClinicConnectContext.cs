// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ClinicConnect.Models;

public partial class ClinicConnectContext : DbContext
{
    public ClinicConnectContext()
    {
    }

    public ClinicConnectContext(DbContextOptions<ClinicConnectContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Billing> Billings { get; set; }

    public virtual DbSet<BillingMedicine> BillingMedicines { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<DoctorAvailability> DoctorAvailabilities { get; set; }

    public virtual DbSet<FrontOffice> FrontOffices { get; set; }

    public virtual DbSet<Medicine> Medicines { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Pharmacist> Pharmacists { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=WKSPUN05GTR0921;Initial Catalog=ClinicConnect;Integrated Security=True;Trust Server Certificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admin__719FE488863F9D08");

            entity.ToTable("Admin");

            entity.HasIndex(e => e.AdminEmail, "UQ__Admin__F2AA7AD9CE750AB4").IsUnique();

            entity.Property(e => e.AdminEmail)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.SecurityAnswer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Security_Answer");
            entity.Property(e => e.SecurityQuestion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Security_Question");
        });

        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__Appointm__FD01B503C50B6044");

            entity.Property(e => e.AppointmentId).HasColumnName("Appointment_ID");
            entity.Property(e => e.AppointmentDate)
                .HasColumnType("datetime")
                .HasColumnName("Appointment_date");
            entity.Property(e => e.AppointmentStatus).HasColumnName("Appointment_status");
            entity.Property(e => e.DoctorFee)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Doctor_fee");
            entity.Property(e => e.DoctorId).HasColumnName("Doctor_ID");
            entity.Property(e => e.PatientId).HasColumnName("Patient_ID");
            entity.Property(e => e.Reason).HasMaxLength(255);

            entity.HasOne(d => d.Doctor).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK__Appointme__Docto__300424B4");

            entity.HasOne(d => d.Patient).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK__Appointme__Patie__2F10007B");
        });

        modelBuilder.Entity<Billing>(entity =>
        {
            entity.HasKey(e => e.BillingId).HasName("PK__Billing__3767153F6C0DE935");

            entity.ToTable("Billing");

            entity.Property(e => e.BillingId).HasColumnName("Billing_ID");
            entity.Property(e => e.Discount).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PatientId).HasColumnName("Patient_ID");
            entity.Property(e => e.Tax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Patient).WithMany(p => p.Billings)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK__Billing__Patient__3E52440B");
        });

        modelBuilder.Entity<BillingMedicine>(entity =>
        {
            entity.HasKey(e => new { e.BillingId, e.MedId }).HasName("PK__BillingM__49D06AFCE0492760");

            entity.Property(e => e.BillingId).HasColumnName("Billing_ID");
            entity.Property(e => e.MedId).HasColumnName("MedID");
            entity.Property(e => e.Discount).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Billing).WithMany(p => p.BillingMedicines)
                .HasForeignKey(d => d.BillingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BillingMe__Billi__440B1D61");

            entity.HasOne(d => d.Med).WithMany(p => p.BillingMedicines)
                .HasForeignKey(d => d.MedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BillingMe__MedID__44FF419A");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.DoctorId).HasName("PK__Doctor__E59B530F3217D84F");

            entity.ToTable("Doctor");

            entity.Property(e => e.DoctorId).HasColumnName("Doctor_ID");
            entity.Property(e => e.DoctorEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doctor_Email");
            entity.Property(e => e.DoctorName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Doctor_Name");
            entity.Property(e => e.DoctorPhoneNo).HasColumnName("Doctor_PhoneNo");
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.Specialization)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DoctorAvailability>(entity =>
        {
            entity.HasKey(e => e.AvailId).HasName("PK__DoctorAv__F9746114B09202E5");

            entity.ToTable("DoctorAvailability");

            entity.Property(e => e.AvailId).HasColumnName("Avail_ID");
            entity.Property(e => e.DoctorId).HasColumnName("Doctor_ID");
            entity.Property(e => e.EndTime).HasColumnName("End_Time");
            entity.Property(e => e.StartTime).HasColumnName("Start_Time");

            entity.HasOne(d => d.Doctor).WithMany(p => p.DoctorAvailabilities)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK__DoctorAva__Docto__2A4B4B5E");
        });

        modelBuilder.Entity<FrontOffice>(entity =>
        {
            entity.HasKey(e => e.FrontOfficeMemberCode).HasName("PK__FrontOff__AD39A8F88EA061DA");

            entity.ToTable("FrontOffice");

            entity.Property(e => e.FrontOfficeMemberCode).HasColumnName("FrontOffice_MemberCode");
            entity.Property(e => e.FrontOfficeAddress)
                .HasMaxLength(255)
                .HasColumnName("FrontOffice_Address");
            entity.Property(e => e.FrontOfficeEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FrontOffice_Email");
            entity.Property(e => e.FrontOfficeName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FrontOffice_Name");
            entity.Property(e => e.FrontOfficePhoneNo).HasColumnName("FrontOffice_PhoneNo");
            entity.Property(e => e.Password).HasMaxLength(50);
        });

        modelBuilder.Entity<Medicine>(entity =>
        {
            entity.HasKey(e => e.MedId).HasName("PK__Medicine__EB77FC36EC8CABB9");

            entity.ToTable("Medicine");

            entity.Property(e => e.MedId).HasColumnName("MedID");
            entity.Property(e => e.MedBrand)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MedName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MedPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PharmMemberId).HasColumnName("PharmMemberID");

            entity.HasOne(d => d.PharmMember).WithMany(p => p.Medicines)
                .HasForeignKey(d => d.PharmMemberId)
                .HasConstraintName("FK__Medicine__PharmM__3B75D760");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK__Message__F5A446E2932924A6");

            entity.ToTable("Message");

            entity.Property(e => e.MessageId).HasColumnName("Message_ID");
            entity.Property(e => e.AppointmentId).HasColumnName("Appointment_ID");
            entity.Property(e => e.DoctorId).HasColumnName("Doctor_ID");
            entity.Property(e => e.DoctorMessage).HasColumnType("text");
            entity.Property(e => e.PatientId).HasColumnName("Patient_ID");
            entity.Property(e => e.PatientMessage).HasColumnType("text");
            entity.Property(e => e.SentDate)
                .HasColumnType("datetime")
                .HasColumnName("Sent_date");

            entity.HasOne(d => d.Appointment).WithMany(p => p.Messages)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK__Message__Appoint__34C8D9D1");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Messages)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK__Message__Doctor___33D4B598");

            entity.HasOne(d => d.Patient).WithMany(p => p.Messages)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK__Message__Patient__32E0915F");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PK__Patients__C1A88B5959151914");

            entity.HasIndex(e => e.PatientEmail, "UQ__Patients__661206A541254649").IsUnique();

            entity.Property(e => e.PatientId).HasColumnName("Patient_ID");
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.PatientAddress)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Patient_Address");
            entity.Property(e => e.PatientAge).HasColumnName("Patient_Age");
            entity.Property(e => e.PatientEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Patient_Email");
            entity.Property(e => e.PatientGender)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Patient_Gender");
            entity.Property(e => e.PatientName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Patient_Name");
            entity.Property(e => e.PatientPhoneNo).HasColumnName("Patient_PhoneNo");
            entity.Property(e => e.PregisterDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("PRegister_Date");
            entity.Property(e => e.SecurityAnswer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Security_Answer");
            entity.Property(e => e.SecurityQuestion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Security_Question");
        });

        modelBuilder.Entity<Pharmacist>(entity =>
        {
            entity.HasKey(e => e.PharmMemberId).HasName("PK__Pharmaci__C05E9055D7C4A7F5");

            entity.Property(e => e.PharmMemberId).HasColumnName("PharmMemberID");
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.PharmAddress).HasMaxLength(60);
            entity.Property(e => e.PharmEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PharmName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PharmPhoneNo).HasColumnName("PharmPhone_no");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}